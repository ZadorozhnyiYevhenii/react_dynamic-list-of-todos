{"version":3,"sources":["types/Select.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Select","TodoList","todos","setSelectedTodo","selectedTodo","className","map","todo","classNames","id","completed","title","type","onClick","currentTodo","FILTER_VALUES","All","Active","Completed","TodoFilter","query","setQuery","setFilter","onChange","event","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","closeModal","useState","user","setUser","useEffect","userId","href","email","name","App","setTodos","isLoading","setIsLoading","errorMessage","setErrorMessage","filter","selectTodo","setSelectTodo","catch","finally","visibleTodos","useMemo","todosToFilter","searchValue","filterStatus","trim","toLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a78131fd.chunk.js","sourcesContent":["export enum Select {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  setSelectedTodo: (value: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setSelectedTodo,\n  selectedTodo,\n}) => {\n  const handleClick = (currentTodo: Todo) => {\n    if (setSelectedTodo) {\n      setSelectedTodo(currentTodo);\n    }\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': selectedTodo !== null\n                  && selectedTodo.id === todo.id,\n              })}\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">{todo.id}</td>\n              {todo.completed ? (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              ) : (\n                <td className=\"is-vcentered\" />\n              )}\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleClick(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={\n                      selectedTodo !== null && selectedTodo.id === todo.id\n                        ? 'far fa-eye-slash'\n                        : 'far fa-eye'\n                    }\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { Select } from '../../types/Select';\n\ntype Props = {\n  query: string;\n  setQuery: (value: string) => void;\n  setFilter: (value: Select) => void;\n};\n\nconst FILTER_VALUES = [Select.All, Select.Active, Select.Completed];\n\nexport const TodoFilter: React.FC<Props> = (\n  {\n    query,\n    setQuery,\n    setFilter,\n  },\n) => {\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilter(event.target.value as Select);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleFilterChange}\n          >\n            {FILTER_VALUES.map(value => (\n              <option\n                value={value}\n                key={value}\n              >\n                {value}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                setQuery('');\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo;\n  closeModal: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, closeModal }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(todo.userId).then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? <strong className=\"has-text-danger\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { Select } from './types/Select';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [query, setQuery] = useState<string>('');\n  const [filter, setFilter] = useState(Select.All);\n  const [selectTodo, setSelectTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(setTodos)\n      .catch(() => setErrorMessage('There are no todos'))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const filteredTodos = (todosToFilter: Todo[], filterStatus: Select, searchValue: string): Todo[] => {\n    if (filterStatus === Select.All && !searchValue.trim()) {\n      return todosToFilter;\n    }\n\n    return todosToFilter.filter(currentTodo => {\n      if (filterStatus === Select.Active && currentTodo.completed) {\n        return false;\n      }\n\n      if (filterStatus === Select.Completed && !currentTodo.completed) {\n        return false;\n      }\n\n      if (searchValue.trim()\n        && !currentTodo.title.toLowerCase().includes(searchValue.toLowerCase())) {\n        return false;\n      }\n\n      return true;\n    });\n  };\n\n  const visibleTodos = useMemo(() => {\n    return filteredTodos(todos, filter, query);\n  }, [todos, filter, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                setFilter={setFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {todos.length > 0 ? (\n                <TodoList\n                  todos={visibleTodos}\n                  setSelectedTodo={setSelectTodo}\n                  selectedTodo={selectTodo}\n                />\n              ) : (\n                <p>{errorMessage}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectTodo && <TodoModal closeModal={() => setSelectTodo(null)} todo={selectTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}